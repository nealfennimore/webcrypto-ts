// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PBKDF2 Original should derive keys: AES_CBC_128_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-CBC",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_CBC_128_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-CBC",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_CBC_128_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-CBC",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_CBC_192_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-CBC",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_CBC_192_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-CBC",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_CBC_192_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-CBC",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_CBC_256_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-CBC",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_CBC_256_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-CBC",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_CBC_256_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-CBC",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_CTR_128_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-CTR",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_CTR_128_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-CTR",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_CTR_128_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-CTR",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_CTR_192_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-CTR",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_CTR_192_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-CTR",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_CTR_192_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-CTR",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_CTR_256_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-CTR",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_CTR_256_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-CTR",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_CTR_256_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-CTR",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_GCM_128_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-GCM",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_GCM_128_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-GCM",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_GCM_128_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-GCM",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_GCM_192_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-GCM",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_GCM_192_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-GCM",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_GCM_192_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-GCM",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_GCM_256_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-GCM",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_GCM_256_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-GCM",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_GCM_256_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-GCM",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_KW_128_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-KW",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "wrapKey",
    "unwrapKey",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_KW_128_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-KW",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "wrapKey",
    "unwrapKey",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_KW_128_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-KW",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "wrapKey",
    "unwrapKey",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_KW_192_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-KW",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "wrapKey",
    "unwrapKey",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_KW_192_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-KW",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "wrapKey",
    "unwrapKey",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_KW_192_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-KW",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "wrapKey",
    "unwrapKey",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_KW_256_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-KW",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "wrapKey",
    "unwrapKey",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_KW_256_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-KW",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "wrapKey",
    "unwrapKey",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: AES_KW_256_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-KW",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "wrapKey",
    "unwrapKey",
  ],
}
`;

exports[`PBKDF2 Original should derive keys: HMAC_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "hash": Object {
      "name": "SHA-512",
    },
    "length": 512,
    "name": "HMAC",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "sign",
    "verify",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_CBC_128_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-CBC",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_CBC_128_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-CBC",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_CBC_128_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-CBC",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_CBC_192_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-CBC",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_CBC_192_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-CBC",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_CBC_192_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-CBC",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_CBC_256_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-CBC",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_CBC_256_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-CBC",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_CBC_256_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-CBC",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_CTR_128_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-CTR",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_CTR_128_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-CTR",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_CTR_128_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-CTR",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_CTR_192_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-CTR",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_CTR_192_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-CTR",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_CTR_192_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-CTR",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_CTR_256_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-CTR",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_CTR_256_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-CTR",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_CTR_256_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-CTR",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_GCM_128_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-GCM",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_GCM_128_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-GCM",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_GCM_128_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-GCM",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_GCM_192_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-GCM",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_GCM_192_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-GCM",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_GCM_192_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-GCM",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_GCM_256_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-GCM",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_GCM_256_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-GCM",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_GCM_256_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-GCM",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "encrypt",
    "decrypt",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_KW_128_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-KW",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "wrapKey",
    "unwrapKey",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_KW_128_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-KW",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "wrapKey",
    "unwrapKey",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_KW_128_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 128,
    "name": "AES-KW",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "wrapKey",
    "unwrapKey",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_KW_192_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-KW",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "wrapKey",
    "unwrapKey",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_KW_192_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-KW",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "wrapKey",
    "unwrapKey",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_KW_192_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 192,
    "name": "AES-KW",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "wrapKey",
    "unwrapKey",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_KW_256_SHA_256 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-KW",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "wrapKey",
    "unwrapKey",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_KW_256_SHA_384 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-KW",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "wrapKey",
    "unwrapKey",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: AES_KW_256_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "length": 256,
    "name": "AES-KW",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "wrapKey",
    "unwrapKey",
  ],
}
`;

exports[`PBKDF2 Proxied should derive keys: HMAC_SHA_512 1`] = `
CryptoKey {
  Symbol(kKeyObject): SecretKeyObject {
    Symbol(kKeyType): "secret",
  },
  Symbol(kAlgorithm): Object {
    "hash": Object {
      "name": "SHA-512",
    },
    "length": 512,
    "name": "HMAC",
  },
  Symbol(kExtractable): true,
  Symbol(kKeyUsages): Array [
    "sign",
    "verify",
  ],
}
`;
